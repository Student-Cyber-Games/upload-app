name: "Upload app to TdA"
description: "Upload action for the Tour de App competition"
author: "Student Cyber Games"
branding:
  color: orange
  icon: server
inputs:
  tdc_token:
    description: "Access token"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: '24'

    - shell: bash
      run: npm install -g ajv-cli

    - name: Validate configuration files
      env: ${{ env }}
      shell: bash
      run: |
        if [ ! -f "tourdeapp.yaml" ]; then
          echo "‚ùå tourdeapp.yaml not found!"
          exit 1
        fi
        curl -o schema.json https://portalbush.tourde.cloud/static/schema.json
        envsubst < tourdeapp.yaml > tourdeapp.tmp && mv tourdeapp.tmp tourdeapp.yaml
        yq eval -o=json tourdeapp.yaml > tourdeapp.json
        ajv --spec=draft2020 validate -s schema.json -d tourdeapp.json
    - name: Check if paid
      id: check_payment
      shell: bash
      run: |
        response=$(curl "https://authmesh.tourde.cloud/payment" \
          -H "Authorization: Bearer ${{ inputs.tdc_token }}" -s)

        paid=$(echo "$response" | jq -r '.paid')
        documentId=$(echo "$response" | jq -r '.documentId')
        slug=$(echo "$response" | jq -r '.slug')

        if [ "$paid" != "true" ]; then
          printf "\n\n######################################################################################\n"
          printf "# Please pay the entry fee to deploy your application(syncs are made every 8 hours.) #\n"
          printf "######################################################################################\n\n"
          exit 1
        fi
        echo "documentId=$documentId" >> $GITHUB_OUTPUT
        echo "slug=$slug" >> $GITHUB_OUTPUT
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      shell: bash
      env:
        REGISTRY_URL: registry.tourde.cloud
        REGISTRY_PASSWORD: ${{ inputs.tdc_token }}
      run: |
        set -e

        for i in $(yq eval '.build | keys | .[]' tourdeapp.yaml); do
          commit_hash=$(git rev-parse --short HEAD)
          image_fqn="${{ steps.check_payment.outputs.slug }}/$(yq eval ".build[$i].name" tourdeapp.yaml):${commit_hash}"
        
          dockerfile=$(yq eval ".build[$i].dockerfile // \"\"" tourdeapp.yaml)
          context=$(yq eval ".build[$i].context // \".\"" tourdeapp.yaml)
          args=$(yq eval ".build[$i].args // {}" tourdeapp.yaml -j)

          build_args=""
          for key in $(echo "$args" | jq -r 'keys[]'); do
            val=$(echo "$args" | jq -r --arg k "$key" '.[$k]')
            export build_arg_$key="$val"
            build_args+="--build-arg build_arg_$key "
          done

          echo "docker build -f "$dockerfile" $build_args --cache-from=type=gha --cache-to=type=gha,mode=max -t $REGISTRY_URL/${image_fqn} $context"
          echo "Building Docker image with Dockerfile: $dockerfile, context: $context, tag: $REGISTRY_URL/${image_fqn}, args: $build_args"
          docker build -f "$dockerfile" $build_args --cache-from=type=gha --cache-to=type=gha,mode=max -t $REGISTRY_URL/${image_fqn} $context
        done
        docker login $REGISTRY_URL --username user --password $REGISTRY_PASSWORD
        for i in $(yq eval '.build | keys | .[]' tourdeapp.yaml); do
          docker push $REGISTRY_URL/${{ steps.check_payment.outputs.slug }}/$(yq eval ".build[$i].name" tourdeapp.yaml):$(git rev-parse --short HEAD)
        done

    - name: Upload application configuration
      shell: bash
      run: |
        set -e
        commit_hash=$(git rev-parse --short HEAD)
        branch_name=${GITHUB_REF#refs/heads/}
        echo "Uploading configuration for commit $commit_hash on branch $branch_name"
        curl -X POST "https://authmesh.tourde.cloud/${{ steps.check_payment.outputs.documentId }}/config" \
        -H "Authorization: Bearer ${{ inputs.tdc_token }}" \
        -Ffile=@tourdeapp.yaml -Fbranch="$branch_name" -Fcommit="$commit_hash"